name: Publish package to PyPip
on:
  release:
    types:
      - created

jobs:

  Build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version-file: '.python-version'
    - name: Install poetry
      run: pipx install poetry==1.8.3
    - name: Install dependencies from cache
      id: poetry-cache
      uses: actions/cache@v4
      with:
        path: .venv
        key: poetry-ci-dependencies-${{ hashFiles('**/poetry.lock') }}
    - name: Install
      run: poetry install --no-interaction --no-root
      if: steps.poetry-cache.outputs.cache-hit != 'true'

    - name: Build
      run: make build

    - name: Upload packages
      if: success()
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: packages
        path: dist/

  PublishToPyPip:
    name: Publish distribution ðŸ“¦ to PyPI
    runs-on: ubuntu-latest
    needs: Build
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/pytomation
    steps:

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: dist/

    - name: Publish distribution ðŸ“¦ to PyPi
      uses: pypa/gh-action-pypi-publish@release/v1.10

  UploadToRelease:
    runs-on: ubuntu-latest
    needs: Build
    permissions:
      contents: write
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: dist/

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release upload
        '${{ github.event.release.tag_name }}' dist/**
        --repo '${{ github.repository }}'
